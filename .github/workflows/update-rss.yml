name: Update Fanatical RSS Feeds

on:
  schedule:
    # Run every 6 hours
    - cron: '0 */6 * * *'
    - cron: '15 17 * * *'
  # Allow manual triggering
  workflow_dispatch:
  # Run on push to main branch
  push:
    branches: [ main ]

jobs:
  update-feeds:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      pages: write
      id-token: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'
          
      - name: Clean Go cache
        run: |
          go clean -cache
          go clean -modcache || true
          
      - name: Download dependencies
        run: |
          go mod download
          go mod tidy
        
      - name: Build application
        run: |
          echo "Building gofanatical..."
          go build -o gofanatical ./cmd/gofanatical.go
          echo "Build completed successfully"
        
      - name: Generate RSS feeds
        run: |
          echo "Generating RSS feeds..."
          ./gofanatical
          echo "RSS generation completed"
        
      - name: List generated files
        run: |
          echo "Contents of docs directory:"
          ls -la docs/ || echo "docs directory not found"
          echo "RSS files:"
          find docs -name "*.rss" -exec ls -la {} \; || echo "No RSS files found"
          
      - name: Show RSS content (for debugging)
        run: |
          echo "=== RSS CONTENT DEBUG ==="
          for file in docs/*.rss; do
            if [ -f "$file" ]; then
              echo "File: $file"
              echo "Size: $(wc -c < "$file") bytes"
              echo "First 10 lines:"
              head -10 "$file"
              echo "---"
            fi
          done || echo "No RSS files to show"
          
      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action Bot"
          
      - name: Check for changes
        id: verify-changed-files
        run: |
          git add docs/
          if [ -n "$(git status --porcelain)" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "Changes detected:"
            git status --short
          else
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "No changes detected"
          fi
          
      - name: Commit and push changes
        if: steps.verify-changed-files.outputs.changed == 'true'
        run: |
          git commit -m "🤖 Auto-update RSS feeds - $(date '+%Y-%m-%d %H:%M:%S UTC')"
          git push
          
      - name: Deploy to GitHub Pages
        if: steps.verify-changed-files.outputs.changed == 'true'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs
          force_orphan: true
          
      - name: Summary
        run: |
          echo "## RSS Update Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp**: $(date '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "- **Changes**: ${{ steps.verify-changed-files.outputs.changed }}" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.verify-changed-files.outputs.changed }}" == "true" ]; then
            echo "- **Status**: ✅ RSS feeds updated successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Status**: ℹ️ No changes to RSS feeds" >> $GITHUB_STEP_SUMMARY
          fi
          echo "- **Live Site**: https://feuerlord2.github.io/Fanatical-RSS-Site/" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Debug Info" >> $GITHUB_STEP_SUMMARY
          echo "- **RSS Files Count**: $(find docs -name "*.rss" | wc -l)" >> $GITHUB_STEP_SUMMARY
          for file in docs/*.rss; do
            if [ -f "$file" ]; then
              echo "- **$(basename "$file")**: $(wc -c < "$file") bytes" >> $GITHUB_STEP_SUMMARY
            fi
          done || echo "- **No RSS files found**" >> $GITHUB_STEP_SUMMARY
